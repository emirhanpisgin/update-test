import Updater from "basic-electron-updater";
import { app, BrowserWindow } from "electron";
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

const updater = new Updater({
    repo: "emirhanpisgin/update-test",
    autoDownload: true,
    allowPrerelease: false,
    channel: "latest",
    debug: true,
});

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
    app.quit();
}

let mainWindow: BrowserWindow | null = null;
const createWindow = (): void => {
    mainWindow = new BrowserWindow({
        height: 600,
        width: 800,
        webPreferences: {
            preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
        },
    });
    mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
    mainWindow.webContents.openDevTools();

    // --- Updater event forwarding ---
    const sendUpdateState = (state: any) => {
        if (mainWindow && mainWindow.webContents) {
            mainWindow.webContents.send("update-state", state);
        }
    };

    updater.on("update-available", (info) => {
        sendUpdateState({ type: "update-available", info });
    });
    updater.on("update-not-available", () => {
        sendUpdateState({ type: "update-not-available" });
    });
    updater.on("download-progress", (progress) => {
        sendUpdateState({ type: "download-progress", progress });
    });
    updater.on("downloaded", (filePath) => {
        sendUpdateState({ type: "downloaded", filePath });
    });
    updater.on("error", (err) => {
        sendUpdateState({ type: "error", error: err.message || String(err) });
    });
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
import { ipcMain } from "electron";
app.on("ready", () => {
    createWindow();
    // Listen for manual update check from renderer
    ipcMain.on("check-for-updates", async (event) => {
        try {
            await updater.checkForUpdates();
        } catch (err) {
            if (mainWindow && mainWindow.webContents) {
                mainWindow.webContents.send("update-state", { type: "error", error: err.message || String(err) });
            }
        }
    });
    // Listen for manual download trigger from renderer
    ipcMain.on("download-update", async (event) => {
        try {
            await updater.downloadUpdate();
        } catch (err) {
            if (mainWindow && mainWindow.webContents) {
                mainWindow.webContents.send("update-state", { type: "error", error: err.message || String(err) });
            }
        }
    });
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
    if (process.platform !== "darwin") {
        app.quit();
    }
});

app.on("activate", () => {
    // On OS X it's common to re-create a window in the app when the
    // dock icon is clicked and there are no other windows open.
    if (BrowserWindow.getAllWindows().length === 0) {
        createWindow();
    }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
